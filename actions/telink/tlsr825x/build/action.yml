# Action to build a Telink Zigbee project.
name: 'Build a Telink tlsr825x project'
description: 'Install the Telink IDE, Zigbee SDK and the build a tlsr825x project'

# env: Not valid in an Action; see the first step below.

inputs:
  telink_ide_path:
    description: Location of the Telink IDE
    default: $GITHUB_WORKSPACE\_ide
  telink_zigbee_sdk:
    description: Location of the Telink Zigbee SDK
    default: $GITHUB_WORKSPACE\_sdk\tl_zigbee_sdk
  dummy:
    description: Location of the Telink Zigbee SDK
    default: $GITHUB_WORKSPACE\_sdk
  target:
    description: tlsr8258 target to build
    default: cloudsmets-8258

runs:
  using: "composite"
  steps:
    - name: Set environment variables
      shell: pwsh
      env:
        # !!PDS: This may be badly named!
        PROJECT: "tlsr8258\\build\\tlsr_tc32"
        EXTENSIONS: "bin,elf,lst"
      run: |
        Write-Information "Dummy: ${env::DUMMY}" -InformationAction Continue
        Write-Information "IDE: ${{ inputs.telink_ide_path }}" -InformationAction Continue
        echo "PROJECT=$env:PROJECT" >> ${env:GITHUB_ENV}
        echo "EXTENSIONS=$env:EXTENSIONS" >> ${env:GITHUB_ENV}

        # We need some intermediate variables to help upload artifacts.
        $extension_list = $env:EXTENSIONS.Split(",")
        $image_base="${{ inputs.zigbee_sdk }}\${env:PROJECT}\${{ inputs.target }}\${{ inputs.target }}"
        $image_list = @()

        # Writing a multi-line string is "magic" in GitHub!
        # Ref: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
        $EOF=[System.Guid]::NewGuid().ToString()
        echo "_image_files<<${EOF}" >> ${env:GITHUB_ENV}
        foreach ($ext in $extension_list)
        {
          echo "${image_base}.${ext}" >> ${env:GITHUB_ENV}
        }
        echo "${EOF}" >> ${env:GITHUB_ENV}

    - name: Find eclipsec
      shell: pwsh
      run: |
        $eclipsec=Get-ChildItem -Path "${{ inputs.telink_ide_path }}\eclipsec.exe" -Recurse | Select FullName
        if ($eclipsec.count > 1)
        {
          Write-Error "Multiple instances of 'eclipsec' were found." -ErrorAction:Continue
          Get-ChildItem -Path "${{ inputs.telink_ide_path }}\eclipsec.exe" -Recurse | Select FullName
          exit 1
        }
        # Passing result to the next step.
        Write-Information "'$($eclipsec[0].FullName)' was found." -InformationAction Continue
        echo "eclipsec=$($eclipsec[0].FullName)" >> $env:GITHUB_ENV

    # Eclipse Path Variables cannot be changed using any option so we patch the
    # '.project' file directly.
    - name: 'Patch .project Path Variable'
      shell: pwsh
      run: |
        $TELINK_ZIGBEE_SDK_LINUX="${{ inputs.telink_zigbee_sdk }}" -replace '\\', '/'
        Write-Information "TELINK_ZIGBEE_SDK_LINUX: ${TELINK_ZIGBEE_SDK_LINUX}" -InformationAction Continue
        $PROJECT_PATH="${env:GITHUB_WORKSPACE}\tlsr8258\build\tlsr_tc32\.project"
        Write-Information "PROJECT_PATH: ${PROJECT_PATH}" -InformationAction Continue
        $Content=$(Get-Content -Path ${PROJECT_PATH} -raw) -replace '<value>\$%7BTELINK_ZIGBEE_SDK_WS%7D</value>', "<value>file:/$1${TELINK_ZIGBEE_SDK_LINUX}$2</value>"
        Set-Content -Path ${PROJECT_PATH} -Value ${Content}
        Get-Content -Path ${PROJECT_PATH}

    - name: Build TLSR8258 ZigBee image
      shell: pwsh
      run: |
        Write-Information "Running build process '$env:eclipsec'..." -InformationAction Continue
        # Testing time-out after 5 minutes.
        $proc=Start-Process `
          -FilePath $env:eclipsec `
          -ArgumentList `
            "-vm", """${{ inputs.telink_ide_path }}\jre\bin\client""", `
            "-noSplash", `
            "-application", "org.eclipse.cdt.managedbuilder.core.headlessbuild", `
            "-import", """${env:GITHUB_WORKSPACE}\${env:PROJECT}""", `
            "-cleanBuild", """tlsr_tc32/${{ inputs.target }}""", `
            "--launcher.suppressErrors" `
          -NoNewWindow `
          -RedirectStandardOutput $env:TEMP\stdout.txt `
          -RedirectStandardError $env:TEMP\stderr.txt `
          -PassThru

        # Time out of 5 minutes.
        $timedout = $null
        Wait-Process -InputObject $proc -Timeout 300 -ErrorAction SilentlyContinue -ErrorVariable timedout

        if ($timedout)
        {
          Write-Information "'eclipsec' timed-out before completing." -InformationAction Continue
          $proc.Kill()
        }
        else
        {
          # Check exit code.
          echo "eclipsec_rc=$($proc.ExitCode)" >> $env:GUBHUB_ENV
        }

    - name: Check for errors and expected files
      shell: pwsh
      run: |
        # Display output, especially any errors!
        Write-Information "STDOUT from the installer..." -InformationAction Continue
        Get-Content -Path $env:TEMP\stdout.txt
        Write-Information "STDERR from the installer..." -InformationAction Continue
        Get-Content -Path $env:TEMP\stderr.txt

        # Capture first line of errors to test later.
        Get-Content  -Path $env:TEMP\stderr.txt -First 1
        $stderr=Get-Content  -Path $env:TEMP\stderr.txt -First 1
        Remove-Item -Path $env:TEMP\stdout.txt
        Remove-Item -Path $env:TEMP\stderr.txt

        # Builds worked it all of the following are true:
        # - ExitCode is zero (0) (checked above)
        # - stderr log output is empty
        # - an 'elf' image has been created

        # Appears that the compiler exits with status 1 for success!
        # if ($env:eclipsec_rc -ne 0)
        # {
        #   Write-Error "eclipsec exited with $proc.ExitCode." -ErrorAction:Continue
        #   exit 1
        # }
        # elseif ($stderr -ne "")

        # Eclipsec throws warnings via STDERR so we have to remove them, then
        # remove whitespace and only THEN can we see if $stderr is null!



        # Note that a totally empty error file returns $null when queried using Get-Content.
        if ($stderr -ne $null)
        {
          Write-Error "eclipsec reported errors." -ErrorAction:Continue
          exit 1
        }

        # See if we have all the expected files.
        $image_root = "${{ inputs.zigbee_sdk }}\${env:PROJECT}\${{ inputs.target }}"
        $extensions = "${env:EXTENSIONS}".split(",")
        $missing = $False

        foreach ($ext in $extensions)
        {
          if (! $(Test-Path -Path ${image_root}\${{ inputs.target }}.$ext))
          {
            Write-Error "Expected output file '${image_root}\${{ inputs.target }}.$ext' not found." -ErrorAction:Continue
            $missing=$True
          }
        }

        if ($missing)
        {
            Write-Error "Build has failed." -ErrorAction:Continue
            exit 1
        }

        # Get here and we have succeeded.
        Write-Information "eclipsec build succeeded." -InformationAction:Continue

    - uses: actions/upload-artifact@v3
      with:
        name: tlsr825x-firmware
        path: ${{ env._image_files }}
        retention-days: 1
