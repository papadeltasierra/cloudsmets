# Action to install the Telink Eclipse based IDE.
#
# TODO:
# - Hard-code more paths since we cannot guarentee anything if things move!
name: 'Install Telink IDE'
description: 'Install the Eclipse based IDE required to build Telink tlsr825x projects'

# env:  Not allowed here; see the first step below.

inputs:
  telink_ide_path:
    description: 'Directory into which to install the IDE'
    default: $GITHUB_WORKSPACE\_ide
  dummy1:
    description: 'Directory into which to install the IDE'
    default: $GITHUB_WORKSPACE\_ide
  dummy2:
    description: 'Directory into which to install the IDE'
    default: ${env.GITHUB_WORKSPACE}\_ide
  # This does not work at all!  "Unrecognised name-value".
  # dummy3:
  #   description: 'Directory into which to install the IDE'
  #   default: ${{GITHUB_WORKSPACE}}\_ide
  # Actions canot have "action scoped env (variables)" so set them in an
  # initial step.

runs:
  using: "composite"
  steps:
    - name: Set-up environment variables.
      shell: pwsh
      env:
        # Download locations, filenames and SHA256 hashes.
        IDE_URI: "https://www.dropbox.com/s/ths9rev0tvhhl96/Telink_IDE.zip?dl=1"
        IDE_ZIP: Telink_IDE.zip
        IDE_HASH: "D47595AAFAE1B711A04DC83BAB08467160EA2A3559EA976576C2F8A44F47BF1F"
        IDE_EXE: TelinkSDKv1.3.1.exe
      run: |
        Write-Information "Dummy1: ${{ inputs.dummy1 }}" -InformationAction Continue
        Write-Information "Dummy2: ${{ inputs.dummy2 }}" -InformationAction Continue
        # Write-Information "Dummy3: ${{ inputs.dummy3 }}" -InformationAction Continue
        Write-Information "IDE: ${{ inputs.telink_ide_path }}" -InformationAction Continue
        echo "IDE_URI=$IDE_URI" >> ${env:GITHUB_ENV}
        echo "IDE_ZIP=$IDE_ZIP" >> ${env:GITHUB_ENV}
        echo "IDE_HASH=$IDE_HASH" >> ${env:GITHUB_ENV}

    # Create the required directories.
    - name: Create target directory
      shell: pwsh
      run: |
        if (!(Test-Path ${{ inputs.telink_ide_path }} -PathType container)) {
          New-Item -Path ${{ inputs.telink_ide_path }} -ItemType "directory"
        }

    # Download and expand the IDE
    - name: Download the IDE
      shell: pwsh
      run: Invoke-RestMethod -Method GET -FollowRelLink -Uri "${env:IDE_URI}" -OutFile "${env:TEMP}\${env:IDE_ZIP}"

    # Validate that the IDE has not changed.
    - name: Check IDE hash/version
      shell: pwsh
      run: |
        $Hash=Get-FileHash -Path "${env:TEMP}\${env:IDE_SIP}" -Algorithm sha256
        if ($Hash.hash.ToString() -ne $env:IDE_HASH)
        {
          Write-Warning "IDE hash has changed implying IDE update!"
          Write-Warning "Expected sha256: ${env:IDE_HASH}"
          Write-Warning "Actual sha256:   $(Out-String -InputObject $Hash.hash)"
        }

    # Note that the IDE has a path "IDE" baked into it.
    - name: Unzip the IDE
      shell: pwsh
      run: Expand-Archive -Path "${env:TEMP}\${env:IDE_ZIP}" -DestinationPath "${env:TEMP}"
    - name: Delete IDE Zipfile
      shell: pwsh
      run: Remove-Item -Path "${env:TEMP}\${env:IDE_ZIP}"

    - name: List IDE
      shell: pwsh
      run: Get-ChildItem -Path "${{ inputs.telink_ide_path }}" -Recurse -Name

    - name: Report the IDE version and spot multiple unexpected EXEs.
      shell: pwsh
      run: |
        $exes=Get-ChildItem -Path ${{ inputs.telink_ide_path }}\telink*.exe | Select FullName
        if ($exes.count > 1) {
          Write-Error "Multiple executables were found that could be IDE installers" -ErrorAction:Continue
          Get-ChildItem -Path "${{ inputs.telink_ide_path }}\telink*.exe" | Select FullName
          exit 1
        }
        $version="unknown"
        if ($exes[0].FullName -match '(v\d+\.\d+\.\d+)') {
          $version=$Matches[0]
        }
        Write-Information -Message "Telink IDE version: ${version}" -InformationAction:Continue

    # We do not use the "call operator" ( '&' ) here because it does not appear
    # to work!
    - name: Install the IDE
      shell: pwsh
      run: |
        Get-ChildItem -Path "${env:TEMP}\IDE\telink*.exe"
        $exes=Get-ChildItem -Path "${env:TEMP}\IDE\telink*.exe"
        # Run the installer, waiting for it to complte, redirecting output etc.
        $proc=Start-Process `
          -FilePath $exes[0].FullName `
          -ArgumentList `
            "/VERYSILENT", `
            "/SUPPRESSMSGBOXES", `
            "/DIR=""${{ inputs.telink_ide_path }}""", `
            "/NOICONS", `
            "/LOG=""${logfile}""" `
          -NoNewWindow `
          -RedirectStandardOutput "${env:TEMP}\stdout.txt" `
          -RedirectStandardError "${env:TEMP}\stderr.txt" `
          -Wait `
          -PassThru
        Write-Information "Installer exit code: $($proc.ExitCode.ToString())." -InformationAction:Continue
        Write-Information "STDOUT from the installer..." -InformationAction:Continue
        Get-Content -Path ${env:TEMP}\stdout.txt
        Write-Information "STDERR from the installer..." -InformationAction:Continue
        Get-Content -Path ${env:TEMP}\stderr.txt
        Remove-Item -Path ${env:TEMP}\stdout.txt
        Remove-Item -Path ${env:TEMP}\stderr.txt

        # List the top-level to really confirm that we were installed.
        Write-Information "Directories/files in ${{ inputs.telink_ide_path }}..." -InformationAction:Continue
        Get-ChildItem =Path ${{ inputs.telink_ide_path }} -Recurse -Name
